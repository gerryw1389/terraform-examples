
stages:

- stage: Prod_Release
  jobs: 
  - job: terraform_build
    displayName: 'Prod_Build'
    workspace:
      clean: all 
    timeoutInMinutes: 0
    cancelTimeoutInMinutes: 0
    pool:
        name: 'linux-buildagent' 
    variables:
      - group: prod-secrets

    steps:
      - checkout: example-repo

      - task: PowerShell@2
        displayName: Tokenize TF-Module Sources
        env:
          SYSTEM_ACCESSTOKEN: $(System.AccessToken)
        inputs:
          targetType: 'inline'
          script: |
            git config --global http.extraHeader 'Authorization: Bearer $(System.AccessToken)'
     
      - task: UniversalPackages@0
        displayName: 'Download Terraform v1.3.5'
        inputs:
          command: download
          vstsFeed: 'my-project/binaries_download'
          vstsFeedPackage: 'terraform-linux'
          vstsPackageVersion: '0.0.1'
          downloadDirectory: $(Build.SourcesDirectory)

      - task: Bash@3
        displayName: 'Install Terraform'
        inputs:
          targetType: 'inline'
          workingDirectory: $(Build.SourcesDirectory)
          script: |
            mkdir src
            chmod +x ./terraform
            mv ./terraform ./src/terraform
      
      - task: CopyFiles@2
        displayName: 'Copy Sub Folder To Root Dir'
        inputs:
          SourceFolder: $(Build.SourcesDirectory)/2023-02-27-terraform-template/infra/prod/spoke/eus
          Contents: "**"
          overWrite: true
          TargetFolder: $(Build.SourcesDirectory)
      
      - task: Bash@3
        inputs:
          targetType: 'inline'
          script: |
            ./src/terraform init
        displayName: 'Run init'
      
      - task: Bash@3
        inputs:
          targetType: 'inline'
          script: |
            ./src/terraform validate
        displayName: 'Run validate'

      - task: Bash@3
        inputs:
          targetType: 'inline'
          script: |
            ./src/terraform plan
        env:
          TF_VAR_tenant_id: $(my-tenant)
          TF_VAR_client_id: $(tf-spn-display-name)
          TF_VAR_client_secret: $(tf-spn-secret)
          TF_VAR_subscription_id: $(aa-spoke-id)
          TF_VAR_hub_subscription_id: $(aa-hub-id)
          TF_VAR_pipeline: $(Build.Repository.Name)
          TF_VAR_requested_for: $(Build.RequestedFor)
          TF_VAR_requested_for_email: $(Build.RequestedForEmail)
          TF_INPUT: 0
        displayName: 'Run plan - prod/spoke/eus'

      - task: PublishBuildArtifacts@1
        condition: always()
        inputs:
          pathToPublish: '$(Build.ArtifactStagingDirectory)' 
          artifactName: 'trace_file'    

      - task: DeleteFiles@1
        condition: always()
        displayName: 'Delete files from $(Build.SourcesDirectory)'
        inputs:
          SourceFolder: '$(Build.SourcesDirectory)'
          Contents: '*'

  - job: manual_validation
    displayName: 'Get Validation Approval'
    dependsOn: terraform_build
    condition: eq(dependencies.terraform_build.result, 'Succeeded')
    continueOnError: true
    pool: server
    steps:
      - task: ManualValidation@0
        displayName: 'Validate execution plan'
        timeoutInMinutes: 120
        inputs:
          notifyUsers: me@domain.com
          instructions: Please validate the execution plan and resume
          onTimeout: reject

  - job: terraform_apply
    displayName: 'Prod_Release'
    dependsOn: 
     - terraform_build
     - manual_validation
    condition: and(eq(dependencies.terraform_build.result, 'Succeeded'), in(dependencies.manual_validation.result, 'Succeeded', 'Skipped'))
    workspace:
      clean: all 
    timeoutInMinutes: 0
    cancelTimeoutInMinutes: 0
    pool:
        name: 'linux-buildagent' 
    variables:
      - group: prod-secrets

    steps:
      - checkout: example-repo

      - task: PowerShell@2
        displayName: Tokenize TF-Module Sources
        env:
          SYSTEM_ACCESSTOKEN: $(System.AccessToken)
        inputs:
          targetType: 'inline'
          script: |
            git config --global http.extraHeader 'Authorization: Bearer $(System.AccessToken)'
     
      - task: UniversalPackages@0
        displayName: 'Download Terraform v1.3.5'
        inputs:
          command: download
          vstsFeed: 'my-project/binaries_download'
          vstsFeedPackage: 'terraform-linux'
          vstsPackageVersion: '0.0.1'
          downloadDirectory: $(Build.SourcesDirectory)

      - task: Bash@3
        displayName: 'Install Terraform'
        inputs:
          targetType: 'inline'
          workingDirectory: $(Build.SourcesDirectory)
          script: |
            mkdir src
            chmod +x ./terraform
            mv ./terraform ./src/terraform
      
      - task: CopyFiles@2
        displayName: 'Copy Sub Folder To Root Dir'
        inputs:
          SourceFolder: $(Build.SourcesDirectory)/2023-02-27-terraform-template/infra/prod/spoke/eus
          Contents: "**"
          overWrite: true
          TargetFolder: $(Build.SourcesDirectory)
      
      - task: Bash@3
        inputs:
          targetType: 'inline'
          script: |
            ./src/terraform init
        displayName: 'Run init'
      
      - task: Bash@3
        inputs:
          targetType: 'inline'
          script: |
            ./src/terraform validate
        displayName: 'Run validate'

      - task: Bash@3
        inputs:
          targetType: 'inline'
          script: |
            ./src/terraform plan -out="tf.plan"
        env:
          TF_VAR_tenant_id: $(my-tenant)
          TF_VAR_client_id: $(tf-spn-display-name)
          TF_VAR_client_secret: $(tf-spn-secret)
          TF_VAR_subscription_id: $(aa-spoke-id)
          TF_VAR_hub_subscription_id: $(aa-hub-id)
          TF_VAR_pipeline: $(Build.Repository.Name)
          TF_VAR_requested_for: $(Build.RequestedFor)
          TF_VAR_requested_for_email: $(Build.RequestedForEmail)
          TF_INPUT: 0
        displayName: 'Run plan - prod/spoke/eus'

      - task: Bash@3
        inputs:
          targetType: 'inline'
          script: |
            ./src/terraform apply ./tf.plan
        env:
          TF_VAR_tenant_id: $(my-tenant)
          TF_VAR_client_id: $(tf-spn-display-name)
          TF_VAR_client_secret: $(tf-spn-secret)
          TF_VAR_subscription_id: $(aa-spoke-id)
          TF_VAR_hub_subscription_id: $(aa-hub-id)
          TF_VAR_pipeline: $(Build.Repository.Name)
          TF_VAR_requested_for: $(Build.RequestedFor)
          TF_VAR_requested_for_email: $(Build.RequestedForEmail)
          TF_INPUT: 0
        displayName: 'Run apply - prod/spoke/eus'

      - task: PublishBuildArtifacts@1
        condition: always()
        inputs:
          pathToPublish: '$(Build.ArtifactStagingDirectory)' 
          artifactName: 'trace_file'    

      - task: DeleteFiles@1
        condition: always()
        displayName: 'Delete files from $(Build.SourcesDirectory)'
        inputs:
          SourceFolder: '$(Build.SourcesDirectory)'
          Contents: '*'
