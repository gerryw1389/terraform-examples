trigger:
  - none

stages:
- stage: ResourceGroup_Release
  jobs: 
  - job:
    workspace:
      clean: all 
    timeoutInMinutes: 0
    cancelTimeoutInMinutes: 0
    displayName: 'ResourceGroup_Release'
    pool:
      vmImage: 'ubuntu-latest'
    variables:
      - group: Pipeline_Secrets
    steps:
      - checkout: self  

      - task: Bash@3
        displayName: "Az Login"
        inputs:
            targetType: inline
            failOnStderr: true
            script: |
              az login --service-principal -u $(az-tf-client-id) \
                -p $(az-tf-client-secret) \
                -t $(tenant-id) \
                --output none
              az account set --subscription $(subscription-id)

      - task: Bash@3
        displayName: "terraform init"
        inputs:
            targetType: inline
            failOnStderr: true
            script: |
              terraform init -backend-config="access_key=$(tfstateaccesskey)"

      - task: Bash@3
        displayName: "terraform validate"
        inputs:
            targetType: inline
            failOnStderr: true
            script: |
              terraform validate

      - task: Bash@3
        displayName: "terraform plan"
        inputs:
            targetType: inline
            failOnStderr: true
            script: |
              set TF_LOG=ERROR
              set TF_LOG_PATH=$(Build.ArtifactStagingDirectory)\crash.log
              set
              terraform plan \
                -var="subscription_id=$(subscription-id)" \
                -var="tenant_id=$(tenant-id)" \
                -var="client_id=$(az-tf-client-id)" \
                -var="client_secret=$(az-tf-client-secret)" \
                -out "tf.plan"

      - task: Bash@3
        displayName: "terraform apply"
        inputs:
            targetType: inline
            failOnStderr: true
            script: |
              terraform apply -auto-approve -input=false ./tf.plan

      - task: PublishBuildArtifacts@1
        condition: always()
        displayName: 'Save Error Log to $(Build.ArtifactStagingDirectory) if available'
        inputs:
          pathToPublish: '$(Build.ArtifactStagingDirectory)' 
          artifactName: 'traces_resourcegroup'    

      - task: DeleteFiles@1
        condition: always()
        displayName: 'Delete files from $(Build.SourcesDirectory)'
        inputs:
          SourceFolder: '$(Build.SourcesDirectory)'
          Contents: '*'